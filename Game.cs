//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.18444
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------
using System;

namespace PongServer
{
	public struct Vector2
	{
		public Vector2(float pX, float pY)
		{
			x = pX;
			y = pY;
		}

		public Vector2 Reverse(float playfieldWidth)
		{
			return new Vector2(playfieldWidth - x, y);
		}

		static public Vector2 operator +(Vector2 a, Vector2 b)
		{
			return new Vector2(a.x + b.x, a.y + b.y);
		}

		static public Vector2 operator -(Vector2 a, Vector2 b)
		{
			return new Vector2(a.x - b.x, a.y + b.y);
		}

		static public Vector2 operator *(Vector2 a, Vector2 b)
		{
			return new Vector2(a.x * b.x, a.y * b.y);
		}

		static public Vector2 operator /(Vector2 a, Vector2 b)
		{
			return new Vector2(a.x / b.x, a.y / b.y);
		}

		public string ToIntString()
		{
			return (int)x + "|" + (int)y;
		}

		public override string ToString()
		{
			return x + "|" + y;
		}
	
		public float x;
		public float y;
	}

	public class Game
	{
		private const int maxPoints = 10;
		private const int defaultStartSpeed = 10;
		private const int xCursorCheckPosition = 102;
		private const int halfCursorHeight = 30;
		private const int halfBallHeight = 2;
		private const int verticalReflectionSpeed = 5;

		private Vector2 ballPos = new Vector2(0,0);
		private Vector2 ballSpeed = new Vector2(0,0);

		private Vector2 playfieldSize = new Vector2(1280f, 720f);

		public int leftVerticalPos = 0;
		public int rightVerticalPos = 0;
		
		private int leftPoints = 0;
		private int rightPoints = 0;
		
		public Game()
		{
			Reset();
		}

		//Reset everything
		private void Reset()
		{
			leftPoints = 0;
			rightPoints = 0;
			ResetBall(defaultStartSpeed);
		}

		//Reset ball and cursors
		private void ResetBall(int startSpeed)
		{
			ballPos = new Vector2(playfieldSize.x / 2, playfieldSize.y / 2);
			ballSpeed = new Vector2(startSpeed, 0);
			leftVerticalPos = (int)playfieldSize.y / 2;
			rightVerticalPos = (int)playfieldSize.y / 2;
		}
		
		public void Update()
		{
			float oldX = ballPos.x;

			//Move ball
			ballPos = ballPos + ballSpeed;

			//Check if ball is in range for cursor check (just moved "over" the x position of one of the cursors)
			if(oldX > xCursorCheckPosition && ballPos.x < xCursorCheckPosition && ballPos.x < playfieldSize.x / 2)
			{
				//Check if cursor was at the correct height
				cursorCollisionCheck(leftVerticalPos);
			}

			//Same for right cursor
			if(oldX < playfieldSize.x - xCursorCheckPosition && ballPos.x > playfieldSize.x - xCursorCheckPosition && ballPos.x > playfieldSize.x / 2)
			{
				cursorCollisionCheck(rightVerticalPos);
			}

			//Did the ball move out of the playfield?
			if(ballPos.x > playfieldSize.x)
			{
				Score("l");
			}
			else if(ballPos.x < 0)
			{
				Score("r");
			}
			if(ballPos.y > playfieldSize.y && ballSpeed.y > 0)
			{
				ballSpeed.y *= -1;
			}
			if(ballPos.y < 0 && ballSpeed.y < 0)
			{
				ballSpeed.y *= -1;
			}
		}

		//Someone got a point
		private void Score(string side)
		{
			if(side.Equals("l"))
			{
				leftPoints++;
				EndCheck();
				ResetBall(-defaultStartSpeed);
			}
			else
			{
				rightPoints++;
				EndCheck();
				ResetBall(defaultStartSpeed);
			}
		}

		//Check if someone reached the maximum points and won the round
		private void EndCheck()
		{
			if(leftPoints >= maxPoints)
			{

			}
			else if(rightPoints >= maxPoints)
			{

			}
		}

		private void cursorCollisionCheck(int cursorY)
		{
			//Is the cursor at the right position?
			if(cursorY + halfBallHeight + halfCursorHeight > ballPos.y && cursorY - halfBallHeight - halfCursorHeight < ballPos.y)
			{
				//Reverse horizontal speed
				ballSpeed.x *= -1;

				//Position on the cursor determines vertical speed
				ballSpeed.y = (ballPos.y - cursorY) / halfCursorHeight * verticalReflectionSpeed;
			}
		}

		public Vector2 GetBallPosition(bool reversed = false)
		{
			if(reversed) { return ballPos.Reverse(playfieldSize.x); }
			return ballPos;
		}

		public Vector2 GetBallSpeed(bool reversed = false)
		{
			if(reversed) { return ballSpeed * new Vector2(-1, 1); }
			return ballSpeed;
		}
	}
}