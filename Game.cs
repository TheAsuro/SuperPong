//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.18444
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------
using System;

namespace PongServer
{
	public struct Vector2
	{
		public Vector2(int pX, int pY)
		{
			x = pX;
			y = pY;
		}

		public Vector2 Reverse(int playfieldWidth)
		{
			return new Vector2(playfieldWidth - x, y);
		}

		static public Vector2 operator +(Vector2 a, Vector2 b)
		{
			return new Vector2(a.x + b.x, a.y + b.y);
		}

		static public Vector2 operator -(Vector2 a, Vector2 b)
		{
			return new Vector2(a.x - b.x, a.y + b.y);
		}

		static public Vector2 operator *(Vector2 a, Vector2 b)
		{
			return new Vector2(a.x * b.x, a.y * b.y);
		}

		static public Vector2 operator /(Vector2 a, Vector2 b)
		{
			return new Vector2(a.x / b.x, a.y / b.y);
		}

		public override string ToString()
		{
			return x + "|" + y;
		}
	
		public int x;
		public int y;
	}

	public class Game
	{
		private Vector2 ballPos = new Vector2(0,0);
		private Vector2 ballSpeed = new Vector2(0,0);
		
		private Vector2 playfieldSize = new Vector2(1280, 720);
		private int maxPoints = 10;
		private int defaultStartSpeed = 10;
		
		public float leftVerticalPos = 0;
		public float rightVerticalPos = 0;
		
		private int leftPoints = 0;
		private int rightPoints = 0;
		
		public Game()
		{
			Reset();
		}
		
		private void Reset()
		{
			leftPoints = 0;
			rightPoints = 0;
			ResetBall(defaultStartSpeed);
		}
		
		private void ResetBall(int startSpeed)
		{
			ballPos = new Vector2(playfieldSize.x / 2, playfieldSize.y / 2);
			ballSpeed = new Vector2(startSpeed, 0);
			leftVerticalPos = playfieldSize.y / 2;
			rightVerticalPos = playfieldSize.y / 2;
		}
		
		public void Update()
		{
			ballPos = ballPos + ballSpeed;

			if(ballPos.x > playfieldSize.x)
			{
				Score("l");
			}
			else if(ballPos.x < 0)
			{
				Score("r");
			}
		}

		private void Score(string side)
		{
			if(side.Equals("l"))
			{
				leftPoints++;
				EndCheck();
				ResetBall(-defaultStartSpeed);
			}
			else
			{
				rightPoints++;
				EndCheck();
				ResetBall(defaultStartSpeed);
			}
		}

		private void EndCheck()
		{
			if(leftPoints >= maxPoints)
			{

			}
			else if(rightPoints >= maxPoints)
			{

			}
		}

		public Vector2 GetBallPosition(bool reversed = false)
		{
			if(reversed) { return ballPos.Reverse(playfieldSize.x); }
			return ballPos;
		}

		public Vector2 GetBallSpeed(bool reversed = false)
		{
			if(reversed) { return ballSpeed * new Vector2(-1, -1); }
			return ballSpeed;
		}
	}
}